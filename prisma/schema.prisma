// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  passwordHash      String
  role              Role?               @default(CANDIDATE)
  reset_token       String?
  firstAccess       Boolean?            @default(true)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())
  CandidateProfiles CandidateProfiles[]
  Recruiters        Recruiters[]

  @@map("users")
}

model CandidateProfiles {
  profileId           Int                   @id @default(autoincrement())
  userId              Int
  user                Users                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName           String
  lastName            String
  contactNumber       String
  address             String
  education           String
  experience          String
  references          String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now())
  Applications        Applications[]
  CandidateTechSkills CandidateTechSkills[]

  @@map("candidateProfiles")
}

model Recruiters {
  recruiterId   Int           @id @default(autoincrement())
  userId        Int
  user          Users         @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName     String
  lastName      String
  companyName   String
  contactNumber String
  address       String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  JobListings   JobListings[]
  Evaluations   Evaluations[]
}

model JobListings {
  jobId                 Int            @id @default(autoincrement())
  recruiter             Recruiters     @relation(fields: [recruitersRecruiterId], references: [recruiterId], onDelete: Cascade)
  recruitersRecruiterId Int
  title                 String
  description           String
  requirements          String
  responsibilities      String
  benefits              String
  location              String
  jobType               JobTypes       @default(FULL_TIME)
  created_at            DateTime       @default(now())
  updated_at            DateTime       @default(now())
  Applications          Applications[]

  @@map("jobListings")
}

model Applications {
  applicationId              Int               @id @default(autoincrement())
  jobListingJobId            JobListings       @relation(fields: [jobListingsJobId], references: [jobId], onDelete: Cascade)
  jobListingsJobId           Int
  candidateProfileId         CandidateProfiles @relation(fields: [candidateProfilesProfileId], references: [profileId], onDelete: Cascade)
  candidateProfilesProfileId Int
  coverLetter                String
  resume                     String
  status                     ApplicationStatus @default(APPLIED)
  created_at                 DateTime          @default(now())
  updated_at                 DateTime          @default(now())
  Evaluations                Evaluations[]

  @@map("applications")
}

model Evaluations {
  evaluationId              Int          @id @default(autoincrement())
  recruitersRecruiterId     Int
  applicationsApplicationId Int
  comments                  String
  rating                    Int
  created_at                DateTime     @default(now())
  updated_at                DateTime     @default(now())
  Recruiters                Recruiters   @relation(fields: [recruitersRecruiterId], references: [recruiterId], onDelete: Cascade)
  Applications              Applications @relation(fields: [applicationsApplicationId], references: [applicationId], onDelete: Cascade)

  @@map("evaluations")
}

model TechnologySkills {
  skillId    Int                   @id @default(autoincrement())
  name       String                @unique
  Candidates CandidateTechSkills[]

  @@map("technologySkills")
}

model CandidateTechSkills {
  id              Int               @id @default(autoincrement())
  candidateId     Int
  skillId         Int
  Candidate       CandidateProfiles @relation(fields: [candidateId], references: [profileId], onDelete: Cascade)
  TechnologySkill TechnologySkills  @relation(fields: [skillId], references: [skillId], onDelete: Cascade)

  @@map("candidateTechSkills")
}

enum Role {
  RECRUITER
  CANDIDATE
}

enum JobTypes {
  FULL_TIME
  PART_TIME
  FREELANCE
}

enum ApplicationStatus {
  APPLIED
  REVIEWED
  INTERVIEWED
  HIRED
  REJECTED
}
